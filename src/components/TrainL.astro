---
interface Props {
  direction?: "toLeft" | "toRight";
  carCount?: number;
}

const { direction = "toRight", carCount = 20 } = Astro.props;
---

<div class="train-container">
  <div
    id="trainL"
    class="train"
    data-direction={direction}
    data-car-count={carCount}
  >
    {
      direction === "toRight" ? (
        <>
          {Array.from({ length: carCount }).map((_, i) => (
            <svg width="120" height="70" viewBox="0 0 22 15" xmlns="http://www.w3.org/2000/svg" class="train-car">
              <title>车厢</title>
              <g>
                <title>Layer 1</title>
                <g stroke="null">
                  <path stroke="null" d="m20.30817,0.00001l-18.27735,0c-1.11695,0 -2.03082,1.09068 -2.03082,2.42373l0,9.69491l1.01541,0a2.03082,2.42373 0 1 0 4.06163,0l12.1849,0a2.03082,2.42373 0 1 0 4.06163,0l1.01541,0l0,-9.69491a2.03082,2.42373 0 0 0 -2.03082,-2.42373m-14.21572,6.05932l-4.06163,0l0,-3.63559l4.06163,0l0,3.63559zm8.12327,0l-6.09245,0l0,-3.63559l6.09245,0l0,3.63559zm6.09245,0l-4.06163,0l0,-3.63559l4.06163,0l0,3.63559z" fill="#ffffff"/>
                </g>
              </g>
            </svg>
          ))}
          <svg width="120" height="120" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="train-engine">
            <title>车头</title>
            <g fill="none" fill-rule="evenodd">
              <path d="m12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.018-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"/>
              <path fill="#ffffff" d="M21 18a1 1 0 1 1 0 2H2a1 1 0 1 1 0-2zM12 5c3.224 0 5.942 1.075 7.868 2.589C21.759 9.075 23 11.085 23 13c0 .842-.258 1.56-.713 2.14c-.443.566-1.034.95-1.636 1.214c-1.186.518-2.597.646-3.651.646H2.994A1.995 1.995 0 0 1 1 15V7c0-1.101.89-2 1.998-2zM7 7H3v3h4zm5 0H9v3h4V7.04a12 12 0 0 0-.662-.035zm3 .383V10h4.551a8 8 0 0 0-.919-.839c-.962-.756-2.19-1.395-3.632-1.778"/>
            </g>
          </svg>
        </>
      ) : (
        <>
          <svg width="120" height="120" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" class="train-engine" style="transform: scaleX(-1);">
            <title>车头</title>
            <g fill="none" fill-rule="evenodd">
              <path d="m12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.018-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"/>
              <path fill="#ffffff" d="M21 18a1 1 0 1 1 0 2H2a1 1 0 1 1 0-2zM12 5c3.224 0 5.942 1.075 7.868 2.589C21.759 9.075 23 11.085 23 13c0 .842-.258 1.56-.713 2.14c-.443.566-1.034.95-1.636 1.214c-1.186.518-2.597.646-3.651.646H2.994A1.995 1.995 0 0 1 1 15V7c0-1.101.89-2 1.998-2zM7 7H3v3h4zm5 0H9v3h4V7.04a12 12 0 0 0-.662-.035zm3 .383V10h4.551a8 8 0 0 0-.919-.839c-.962-.756-2.19-1.395-3.632-1.778"/>
            </g>
          </svg>
          {Array.from({ length: carCount }).map((_, i) => (
            <svg width="120" height="70" viewBox="0 0 22 15" xmlns="http://www.w3.org/2000/svg" class="train-car">
              <title>车厢</title>
              <g>
                <title>Layer 1</title>
                <g stroke="null">
                  <path stroke="null" d="m20.30817,0.00001l-18.27735,0c-1.11695,0 -2.03082,1.09068 -2.03082,2.42373l0,9.69491l1.01541,0a2.03082,2.42373 0 1 0 4.06163,0l12.1849,0a2.03082,2.42373 0 1 0 4.06163,0l1.01541,0l0,-9.69491a2.03082,2.42373 0 0 0 -2.03082,-2.42373m-14.21572,6.05932l-4.06163,0l0,-3.63559l4.06163,0l0,3.63559zm8.12327,0l-6.09245,0l0,-3.63559l6.09245,0l0,3.63559zm6.09245,0l-4.06163,0l0,-3.63559l4.06163,0l0,3.63559z" fill="#ffffff"/>
                </g>
              </g>
            </svg>
          ))}
        </>
      )
    }
  </div>
  
  <script type="module">
    import { animate } from 'https://unpkg.com/animejs/lib/anime.esm.js';

    document.addEventListener("DOMContentLoaded", () => {
      const trainElement = document.querySelector(
        "#trainL"
      ) 
      if (!trainElement) return; // 添加检查确保元素存在

      const direction = trainElement.dataset.direction || "toRight";
      const carCount = trainElement.dataset.carCount
        ? parseInt(trainElement.dataset.carCount, 10)
        : 20;
      // 每节车厢宽120px，计算总宽度
      const totalWidth = (carCount + 1) * 120; // +1 是因为还有车头

      // 根据方向和车厢数量设置初始位置
      if (direction === "toRight") {
        trainElement.style.left = `-${totalWidth}px`;
        animate("#trainL", {
          left: "100%",
          duration: 5000, // 修改为5秒
          easing: "easeOutCubic",
        });
      } else {
        trainElement.style.left = "100%";
        animate("#trainL", {
          left: `-${totalWidth}px`,
          duration: 5000, // 修改为5秒
          easing: "easeOutCubic",
        });
      }
    });
  </script>
</div>
<style>
  .train-container {
    overflow: hidden;
    position: relative;
    width: 100%;
    height: 100px; /* 减小高度以适应首屏显示 */
  }

  #trainL {
    display: flex;
    align-items: center;
    position: absolute;
    bottom: 0;
  }

  .train-car,
  .train-engine {
    filter: brightness(0.8) contrast(1.2);
  }

  [data-direction="left"] {
    left: 0;
  }
</style>