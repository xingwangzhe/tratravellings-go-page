---
interface Site {
  id: number;
  name: string;
  status: string;
  url: string;
  tag: string;
  failedReason: string | null;
  lastManualCheck: string | null;
  icon: string | null;
}

// 获取单个随机站点
async function fetchRandomSite(): Promise<any> {
  try {
    const res = await fetch("https://api.travellings.cn/random");
    const data = await res.json();
    
    // 检查响应是否成功
    if (!data.success || !data.data || !Array.isArray(data.data) || data.data.length === 0) {
      return null;
    }
    
    return data.data[0];
  } catch (error) {
    console.error("获取随机站点错误", error);
    return null;
  }
}

// 获取指定数量的随机站点
async function fetchSites(sitesCount: number): Promise<Site[]> {
  try {
    const sites = [];
    
    // 并行获取多个随机站点
    const promises = Array.from({ length: sitesCount }, () => fetchRandomSite());
    const results = await Promise.all(promises);
    
    // 过滤掉获取失败的站点
    for (const result of results) {
      if (result) {
        sites.push({
          id: result.id,
          name: result.name || "未知网站",
          status: result.status || "active",
          url: result.url,
          tag: result.tag,
          failedReason: result.failedReason || null,
          lastManualCheck: result.lastManualCheck || null,
          // 绝不生成 favicon URL，太费性能了
          icon: ``
        });
      }
    }
    
    return sites;
  } catch (error) {
    console.error("获取站点数据失败", error);
    return [];
  }
}

const sites: Site[] = await fetchSites(5); // 获取5个站点作为示例
---

<div class="Site-container">
  <div class="Site-list-wrapper">
    <div class="Site-list" data-site-list>
      <!-- 重复站点列表以实现无缝循环 -->
      {Array.from({ length: 3 }, () => sites).flat().map((site, index) => (
        <div class="Site-card">
          <a href={site.url} target="_blank" rel="noopener noreferrer" class="Site-link">
            <div class="Site-icon">
              {/* // 绝不生成 favicon URL，太费性能了 */}
              <img src={'https://www.travellings.cn/assets/favicon.png'} alt={site.name} onerror="this.style.display='none'" />
            </div>
            <div class="Site-info">
              <h3 class="Site-name">{site.name}</h3>
              <p class="Site-tag">{site.tag}</p>
            </div>
          </a>
        </div>
      ))}
    </div>
  </div>
  <div class="Site-notice" id="site-notice">您将要前往的站点是...</div>
</div>

<script>
  import { animate } from "animejs";

  document.addEventListener("DOMContentLoaded", () => {
    const siteListElement = document.querySelector("[data-site-list]") as HTMLElement | null;
    const siteNoticeElement = document.getElementById("site-notice");
    if (!siteListElement || !siteNoticeElement) return;

    // 获取站点数量（从DOM元素计算）
    const siteCards = siteListElement.querySelectorAll(".Site-card");
    const sitesCount = siteCards.length / 3; // 除以3是因为我们重复了3次列表

    // 获取单个卡片的宽度（包括margin）
    const cardWidth = 350 + 32; // 卡片宽度350px + 间距32px
    
    // 计算一组卡片的总宽度
    const setWidth = sitesCount * cardWidth;

    // 设置初始样式
    siteListElement.style.display = "flex";
    siteListElement.style.alignItems = "center";
    siteListElement.style.position = "absolute";
    siteListElement.style.left = "0";
    siteListElement.style.width = "fit-content";
    siteListElement.style.flexWrap = "nowrap";

    // 执行动画 - 5秒完成一轮
    const animation = animate("[data-site-list]", {
      left: -setWidth + "px",
      duration: 5000,
      easing: "linear",
      loop: true,
    });

    // 4.5秒后更新提示文字显示实际站点名称
    setInterval(() => {
      // 计算屏幕中心位置
      const container = document.querySelector(".Site-container");
      const containerRect = container.getBoundingClientRect();
      const containerCenter = containerRect.left + containerRect.width / 2;
      
      // 获取所有站点链接
      const siteLinks = document.querySelectorAll(".Site-link");
      if (siteLinks.length > 0) {
        // 找到离屏幕中心最近的站点
        let closestLink = siteLinks[0] as HTMLAnchorElement;
        let closestDistance = Infinity;
        
        siteLinks.forEach((link) => {
          const linkRect = link.getBoundingClientRect();
          const linkCenter = linkRect.left + linkRect.width / 2;
          const distance = Math.abs(linkCenter - containerCenter);
          
          if (distance < closestDistance) {
            closestDistance = distance;
            closestLink = link as HTMLAnchorElement;
          }
        });
        
        // 获取站点名称并更新提示文字
        const siteName = closestLink.querySelector(".Site-name").textContent;
        const siteNoticeElement = document.getElementById("site-notice");
        if (siteNoticeElement) {
          siteNoticeElement.textContent = `您将要前往的站点是: ${siteName}`;
        }
        
        // 0.5秒后跳转到屏幕中央的网站
        setTimeout(() => {
          window.location.href = closestLink.href;
        }, 500);
      }
    }, 5000);
  });
</script>

<style>
  .Site-container {
    overflow: hidden;
    position: relative;
    width: 100%;
    height: 250px; /* 减小高度以适应首屏显示 */
    margin: 2rem 0;
    flex-grow: 1;
  }

  .Site-list-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .Site-list {
    gap: 2rem;
    padding: 0 2rem;
    height: 100%;
    display: flex;
    align-items: center;
    position: absolute;
    left: 0;
    width: fit-content;
    flex-wrap: nowrap;
  }

  .Site-card {
    border: 1px solid #333;
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.3s ease;
    background: #1e1e1e;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    min-width: 350px;
    flex-shrink: 0;
    will-change: transform;
  }

  .Site-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 16px 32px rgba(0, 0, 0, 0.5);
    border-color: #3498db;
  }

  .Site-link {
    display: flex;
    align-items: center;
    padding: 2rem;
    text-decoration: none;
    color: #e0e0e0;
    height: 100%;
  }

  .Site-icon {
    flex-shrink: 0;
    width: 72px;
    height: 72px;
    margin-right: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .Site-icon img {
    max-width: 100%;
    max-height: 100%;
    border-radius: 8px;
  }

  .Site-info {
    flex-grow: 1;
    min-width: 0;
  }

  .Site-name {
    margin: 0 0 0.75rem 0;
    font-size: 1.5rem;
    font-weight: 600;
    color: #e0e0e0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .Site-tag {
    margin: 0;
    font-size: 1.1rem;
    color: #aaa;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .Site-notice {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    text-align: center;
    font-size: 1.2rem;
    color: #e0e0e0;
    padding: 1rem;
    background: rgba(30, 30, 30, 0.8);
    backdrop-filter: blur(5px);
    z-index: 10;
  }

  @media (max-width: 768px) {
    .Site-container {
      height: 200px; /* 调整移动端高度 */
    }
    
    .Site-card {
      min-width: 280px;
    }
    
    .Site-link {
      padding: 1.5rem;
    }
    
    .Site-icon {
      width: 60px;
      height: 60px;
      margin-right: 1.5rem;
    }
    
    .Site-name {
      font-size: 1.3rem;
    }
    
    .Site-tag {
      font-size: 1rem;
    }
    
    .Site-notice {
      font-size: 1rem;
      padding: 0.5rem;
    }
  }
</style>