<div class="Site-container">
  <div class="Site-list-wrapper">
    <div class="Site-list" data-site-list>
      <!-- 初始加载状态 -->

    </div>
  </div>
  <div class="Site-notice" id="site-notice">正在加载站点...</div>
</div>

<script type="module">
  import { animate } from 'https://cdn.jsdelivr.net/npm/animejs/+esm';

  // 获取所有站点数据
  async function fetchAllSites() {
    try {
      const res = await fetch("https://backup.api.travellings.cn/list.json");
      const data = await res.json();
      
      // 检查响应是否成功
      if (!data.success || !data.data || !Array.isArray(data.data) || data.data.length === 0) {
        return [];
      }
      
      return data.data;
    } catch (error) {
      console.error("获取站点列表错误", error);
      return [];
    }
  }

  // 从站点列表中随机选择指定数量的站点
  function getRandomSites(sites, count) {
    // 创建一个副本以避免修改原始数组
    const sitesCopy = [...sites];
    
    // Fisher-Yates 洗牌算法随机打乱数组
    for (let i = sitesCopy.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [sitesCopy[i], sitesCopy[j]] = [sitesCopy[j], sitesCopy[i]];
    }
    
    // 返回前count个站点
    return sitesCopy.slice(0, count);
  }

  // 获取指定数量的随机站点
  async function fetchSites(sitesCount) {
    try {
      // 获取所有站点
      const allSites = await fetchAllSites();
      
      if (allSites.length === 0) {
        return [];
      }
      
      // 从所有站点中随机选择指定数量的站点
      const randomSites = getRandomSites(allSites, sitesCount);
      
      // 处理站点数据
      const sites = randomSites.map(site => ({
        id: site.id,
        name: site.name || "未知网站",
        status: site.status || "active",
        url: site.url,
        tag: site.tag,
        failedReason: site.failedReason || null,
        lastManualCheck: site.lastManualCheck || null,
        // 绝不生成 favicon URL，太费性能了
        icon: ``
      }));
      
      return sites;
    } catch (error) {
      console.error("获取站点数据失败", error);
      return [];
    }
  }

  // 渲染站点列表
  function renderSites(sites) {
    const siteListElement = document.querySelector("[data-site-list]");
    if (!siteListElement) return;

    // 清空现有内容
    siteListElement.innerHTML = '';

    // 重复站点列表以实现无缝循环
    const repeatedSites = Array.from({ length: 3 }, () => sites).flat();
    
    repeatedSites.forEach((site) => {
      // 创建站点卡片容器
      const card = document.createElement('div');
      card.className = 'Site-card';
      
      // 应用样式
      card.style.border = '1px solid #333';
      card.style.borderRadius = '16px';
      card.style.overflow = 'hidden';
      card.style.transition = 'all 0.3s ease';
      card.style.background = '#1e1e1e';
      card.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.3)';
      card.style.minWidth = '300px';
      card.style.flexShrink = '0';
      card.style.willChange = 'transform';
      
      // 添加悬停效果
      card.addEventListener('mouseenter', () => {
        card.style.transform = 'translateY(-8px)';
        card.style.boxShadow = '0 16px 32px rgba(0, 0, 0, 0.5)';
        card.style.borderColor = '#3498db';
      });
      
      card.addEventListener('mouseleave', () => {
        card.style.transform = 'translateY(0)';
        card.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.3)';
        card.style.borderColor = '#333';
      });

      // 创建链接元素
      const link = document.createElement('a');
      link.href = site.url;
      link.target = '_blank';
      link.rel = 'noopener noreferrer';
      link.className = 'Site-link';
      
      // 应用链接样式
      link.style.display = 'flex';
      link.style.alignItems = 'center';
      link.style.padding = '1.5rem';
      link.style.textDecoration = 'none';
      link.style.color = '#e0e0e0';
      link.style.height = '100%';

      // 创建图标容器
      const iconDiv = document.createElement('div');
      iconDiv.className = 'Site-icon';
      
      // 应用图标容器样式
      iconDiv.style.flexShrink = '0';
      iconDiv.style.width = '100px';
      iconDiv.style.height = '60px';
      iconDiv.style.marginRight = '1.5rem';
      iconDiv.style.display = 'flex';
      iconDiv.style.flexDirection = 'column';
      iconDiv.style.alignItems = 'center';
      iconDiv.style.justifyContent = 'center';
      iconDiv.style.background = '#4CAF50'; // 使用绿色替代金色
      iconDiv.style.borderRadius = '8px';
      iconDiv.style.fontWeight = 'bold';
      iconDiv.style.fontSize = '24px';
      iconDiv.style.color = '#fff'; // 白色文字

      // 创建ID标签
      const idLabel = document.createElement('span');
      idLabel.textContent = 'ID';
      idLabel.style.fontSize = '10px';
      idLabel.style.fontWeight = 'normal';
      idLabel.style.color = '#fff';
      idLabel.style.lineHeight = '1';
      
      // 创建基于ID的数字显示
      const iconText = document.createElement('span');
      iconText.textContent = site.id;
      iconText.style.display = 'block';
      iconText.style.width = '100%';
      iconText.style.textAlign = 'center';
      iconText.style.lineHeight = '1';
      
      // 创建信息容器
      const infoDiv = document.createElement('div');
      infoDiv.className = 'Site-info';
      
      // 应用信息容器样式
      infoDiv.style.flexGrow = '1';
      infoDiv.style.minWidth = '0';

      // 创建站点名称
      const nameEl = document.createElement('h3');
      nameEl.className = 'Site-name';
      nameEl.textContent = site.name;
      
      // 应用站点名称样式
      nameEl.style.margin = '0 0 0.5rem 0';
      nameEl.style.fontSize = '1.3rem';
      nameEl.style.fontWeight = '600';
      nameEl.style.color = '#e0e0e0';
      nameEl.style.whiteSpace = 'nowrap';
      nameEl.style.overflow = 'hidden';
      nameEl.style.textOverflow = 'ellipsis';

      // 创建站点标签
      const tagEl = document.createElement('p');
      tagEl.className = 'Site-tag';
      tagEl.textContent = site.tag;
      
      // 应用站点标签样式
      tagEl.style.margin = '0';
      tagEl.style.fontSize = '1rem';
      tagEl.style.color = '#aaa';
      tagEl.style.whiteSpace = 'nowrap';
      tagEl.style.overflow = 'hidden';
      tagEl.style.textOverflow = 'ellipsis';

      // 组装元素
      infoDiv.appendChild(nameEl);
      infoDiv.appendChild(tagEl);
      
      iconDiv.appendChild(idLabel); // 添加ID标签
      iconDiv.appendChild(iconText); // 添加数字文本到图标容器
      
      link.appendChild(iconDiv);
      link.appendChild(infoDiv);
      
      card.appendChild(link);
      
      siteListElement.appendChild(card);
    });

    // 启动动画
    initAnimation(sites.length);
  }

  // 初始化动画
  function initAnimation(sitesCount) {
    const siteListElement = document.querySelector("[data-site-list]");
    const siteNoticeElement = document.getElementById("site-notice");
    if (!siteListElement || !siteNoticeElement) return;

    // 获取卡片的宽度（包括margin）
    const cardWidth = 350 + 32; // 卡片宽度350px + 间距32px
    
    // 计算一组卡片的总宽度
    const setWidth = sitesCount * cardWidth;

    // 设置初始样式
    siteListElement.style.display = "flex";
    siteListElement.style.alignItems = "center";
    siteListElement.style.position = "absolute";
    siteListElement.style.left = "0";
    siteListElement.style.width = "fit-content";

    // 执行动画 - 5秒完成一轮
    const animation = animate("[data-site-list]", {
      left: -setWidth + "px",
      duration: 5000,
      easing: "linear",
      loop: true,
    });

    // 4.5秒后更新提示文字显示实际站点名称
    setInterval(() => {
      // 计算屏幕中心位置
      const container = document.querySelector(".Site-container");
      const containerRect = container?.getBoundingClientRect();
      const containerCenter = containerRect ? containerRect.left + containerRect.width / 2 : window.innerWidth / 2;

      // 获取所有站点链接
      const siteLinks = document.querySelectorAll(".Site-link");
      if (siteLinks.length > 0) {
        // 找到离屏幕中心最近的站点
        let closestLink = siteLinks[0];
        let closestDistance = Infinity;
        
        siteLinks.forEach((link) => {
          const linkRect = link.getBoundingClientRect();
          const linkCenter = linkRect.left + linkRect.width / 2;
          const distance = Math.abs(linkCenter - containerCenter);
          
          if (distance < closestDistance) {
            closestDistance = distance;
            closestLink = link;
          }
        });
        
        // 获取站点名称并更新提示文字
        const siteName = closestLink?.querySelector(".Site-name")?.textContent;
        if (siteNoticeElement) {
          siteNoticeElement.textContent = `您将要前往的站点是: ${siteName}`;
        }
        
        // 0.5秒后跳转到屏幕中央的网站
        setTimeout(() => {
          window.location.href = closestLink.href;
        }, 500);
      }
    }, 5000);
  }

  // 页面加载完成后获取站点数据
  document.addEventListener("DOMContentLoaded", async () => {
    // 显示加载状态
    const siteListElement = document.querySelector("[data-site-list]");
    const siteNoticeElement = document.getElementById("site-notice");
    
    if (siteNoticeElement) {
      siteNoticeElement.textContent = "正在加载站点...";
      // 应用样式
      siteNoticeElement.style.position = "absolute";
      siteNoticeElement.style.bottom = "0";
      siteNoticeElement.style.left = "0";
      siteNoticeElement.style.width = "100%";
      siteNoticeElement.style.textAlign = "center";
      siteNoticeElement.style.fontSize = "1.1rem";
      siteNoticeElement.style.color = "#e0e0e0";
      siteNoticeElement.style.padding = "0.8rem";
      siteNoticeElement.style.background = "rgba(30, 30, 30, 0)";
      siteNoticeElement.style.backdropFilter = "blur(5px)";
      siteNoticeElement.style.zIndex = "10";
    }
    
    // 显示初始加载状态
    if (siteListElement) {
      // 创建初始卡片
      const card = document.createElement('div');
      card.className = 'Site-card';
      
      // 应用样式
      card.style.border = '1px solid #333';
      card.style.borderRadius = '16px';
      card.style.overflow = 'hidden';
      card.style.transition = 'all 0.3s ease';
      card.style.background = '#1e1e1e';
      card.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.3)';
      card.style.minWidth = '300px';
      card.style.flexShrink = '0';
      card.style.willChange = 'transform';

      // 创建链接元素
      const link = document.createElement('div');
      link.className = 'Site-link';
      
      // 应用链接样式
      link.style.display = 'flex';
      link.style.alignItems = 'center';
      link.style.padding = '1.5rem';
      link.style.textDecoration = 'none';
      link.style.color = '#e0e0e0';
      link.style.height = '100%';

      // 创建图标容器
      const iconDiv = document.createElement('div');
      iconDiv.className = 'Site-icon';
      
      // 应用图标容器样式
      iconDiv.style.flexShrink = '0';
      iconDiv.style.width = '100px';
      iconDiv.style.height = '60px';
      iconDiv.style.marginRight = '1.5rem';
      iconDiv.style.display = 'flex';
      iconDiv.style.flexDirection = 'column';
      iconDiv.style.alignItems = 'center';
      iconDiv.style.justifyContent = 'center';
      iconDiv.style.background = '#4CAF50'; // 使用绿色替代金色
      iconDiv.style.borderRadius = '8px';
      iconDiv.style.fontWeight = 'bold';
      iconDiv.style.fontSize = '24px';
      iconDiv.style.color = '#fff'; // 白色文字

      // 创建ID标签
      const idLabel = document.createElement('span');
      idLabel.textContent = 'ID';
      idLabel.style.fontSize = '10px';
      idLabel.style.fontWeight = 'normal';
      idLabel.style.color = '#fff';
      idLabel.style.lineHeight = '1';
      
      // 创建基于ID的数字显示
      const iconText = document.createElement('span');
      iconText.textContent = '0';
      iconText.style.display = 'block';
      iconText.style.width = '100%';
      iconText.style.textAlign = 'center';
      iconText.style.lineHeight = '1';
      
      // 创建信息容器
      const infoDiv = document.createElement('div');
      infoDiv.className = 'Site-info';
      
      // 应用信息容器样式
      infoDiv.style.flexGrow = '1';
      infoDiv.style.minWidth = '0';

      // 创建站点名称
      const nameEl = document.createElement('h3');
      nameEl.className = 'Site-name';
      nameEl.textContent = '加载中...';
      
      // 应用站点名称样式
      nameEl.style.margin = '0 0 0.5rem 0';
      nameEl.style.fontSize = '1.3rem';
      nameEl.style.fontWeight = '600';
      nameEl.style.color = '#e0e0e0';
      nameEl.style.whiteSpace = 'nowrap';
      nameEl.style.overflow = 'hidden';
      nameEl.style.textOverflow = 'ellipsis';

      // 创建站点标签
      const tagEl = document.createElement('p');
      tagEl.className = 'Site-tag';
      tagEl.textContent = '正在获取站点';
      
      // 应用站点标签样式
      tagEl.style.margin = '0';
      tagEl.style.fontSize = '1rem';
      tagEl.style.color = '#aaa';
      tagEl.style.whiteSpace = 'nowrap';
      tagEl.style.overflow = 'hidden';
      tagEl.style.textOverflow = 'ellipsis';

      // 组装元素
      infoDiv.appendChild(nameEl);
      infoDiv.appendChild(tagEl);
      
      iconDiv.appendChild(idLabel); // 添加ID标签
      iconDiv.appendChild(iconText); // 添加数字文本到图标容器
      
      link.appendChild(iconDiv);
      link.appendChild(infoDiv);
      
      card.appendChild(link);
      
      siteListElement.appendChild(card);
    }

    // 获取站点数据
    const sites = await fetchSites(5);
    
    if (sites.length > 0) {
      // 渲染站点
      renderSites(sites);
    } else {
      // 处理获取失败的情况
      if (siteNoticeElement) {
        siteNoticeElement.textContent = "加载站点失败，请刷新页面重试";
      }
      
      // 更新初始卡片内容显示错误信息
      if (siteListElement && siteListElement.firstChild) {
        const card = siteListElement.firstChild;
        const nameEl = card.querySelector('.Site-name');
        const tagEl = card.querySelector('.Site-tag');
        
        if (nameEl) nameEl.textContent = '加载失败';
        if (tagEl) tagEl.textContent = '请刷新页面重试';
      }
    }
  });
</script>

<style>
  .Site-container {
    overflow: hidden;
    position: relative;
    width: 100%;
    height: 200px; /* 减小高度以适应首屏显示 */
    margin: 1rem 0;
    flex-grow: 1;
  }

  .Site-list-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }

  .Site-list {
    gap: 2rem;
    padding: 0 2rem;
    height: 100%;
    display: flex;
    align-items: center;
    position: absolute;
    left: 0;
    width: fit-content;
    flex-wrap: nowrap;
  }

  .Site-card {
    border: 1px solid #333;
    border-radius: 16px;
    overflow: hidden;
    transition: all 0.3s ease;
    background: #1e1e1e;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
    min-width: 300px; /* 减小最小宽度 */
    flex-shrink: 0;
    will-change: transform;
  }

  .Site-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 16px 32px rgba(0, 0, 0, 0.5);
    border-color: #3498db;
  }

  .Site-link {
    display: flex;
    align-items: center;
    padding: 1.5rem; /* 减小内边距 */
    text-decoration: none;
    color: #e0e0e0;
    height: 100%;
  }

  .Site-icon {
    flex-shrink: 0;
    width: 100px;
    height: 60px;
    margin-right: 1.5rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: #4CAF50; /* 使用绿色替代金色 */
    border-radius: 8px;
    font-weight: bold;
    font-size: 24px;
    color: #fff; /* 白色文字 */
  }

  .Site-icon img {
    max-width: 100%;
    max-height: 100%;
    border-radius: 8px;
  }

  .Site-info {
    flex-grow: 1;
    min-width: 0;
  }

  .Site-name {
    margin: 0 0 0.5rem 0; /* 减小间距 */
    font-size: 1.3rem; /* 调整字体大小 */
    font-weight: 600;
    color: #e0e0e0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .Site-tag {
    margin: 0;
    font-size: 1rem; /* 调整字体大小 */
    color: #aaa;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .Site-notice {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    text-align: center;
    font-size: 1.1rem; /* 调整字体大小 */
    color: #e0e0e0;
    padding: 0.8rem; /* 调整内边距 */
    background: rgba(30, 30, 30, 0);
    backdrop-filter: blur(5px);
    z-index: 10;
  }

  @media (max-width: 768px) {
    .Site-container {
      height: 180px; /* 调整移动端高度 */
    }
    
    .Site-card {
      min-width: 250px; /* 调整移动端最小宽度 */
    }
    
    .Site-link {
      padding: 1rem; /* 调整移动端内边距 */
    }
    
    .Site-icon {
      width: 100px;
      height: 60px;
      margin-right: 1rem;
    }
    
    .Site-name {
      font-size: 1.1rem; /* 调整移动端字体大小 */
    }
    
    .Site-tag {
      font-size: 0.9rem; /* 调整移动端字体大小 */
    }
    
    .Site-notice {
      font-size: 0.9rem; /* 调整移动端字体大小 */
      padding: 0.5rem;
    }
  }
</style>